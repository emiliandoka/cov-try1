{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\prov-react\\\\covidp\\\\src\\\\components\\\\map\\\\map.parent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, memo } from \"react\";\nimport ReactTooltip from \"react-tooltip\"; //import MapChart from \"./map.comp\";\n\nimport './map.comp.style.scss';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst max = data => {\n  let maxi = 0;\n\n  for (let e = 0; e < data.length; e++) {\n    if (data[e].TotalConfirmed > maxi) {\n      maxi = data[e].TotalConfirmed;\n    }\n  }\n\n  return maxi;\n};\n\nconst formatter = new Intl.NumberFormat('en-US', {\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});\n\nconst MapChart = (setTooltipContent, props) => {\n  var maxi = max(props);\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      scale: 200\n    },\n    children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n      children: /*#__PURE__*/_jsxDEV(Geographies, {\n        geography: geoUrl,\n        children: ({\n          geographies\n        }) => geographies.map(geo => {\n          var value, index;\n\n          for (let i = 0; i < props.length; i++) {\n            if (props[i].Country = geo.properties.NAME) {\n              value = props[i].TotalConfirmed;\n              index = i;\n              break;\n            }\n          }\n\n          console.log(formatter.format(maxi / props[index].TotalConfirmed));\n          return /*#__PURE__*/_jsxDEV(Geography, {\n            \"data-try\": \"yoy\",\n            geography: geo,\n            onMouseEnter: () => {\n              const {\n                NAME\n              } = geo.properties;\n              setTooltipContent(`${NAME} — ${value.toLocaleString()}`);\n            },\n            onMouseLeave: () => {\n              setTooltipContent(\"\");\n            },\n            style: {\n              default: {\n                fill: `rgba(209 , 7 , 0 , ${parseInt(formatter.format(props[index].TotalConfirmed * 10 / maxi))} )`,\n                outline: \"none\"\n              },\n              hover: {\n                fill: \"#F53\",\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#E42\",\n                outline: \"none\"\n              }\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 24\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this);\n};\n\n_c = MapChart;\n\nconst Mapp = props => {\n  _s();\n\n  const [content, setContent] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Map\",\n    children: [MapChart(setContent, props.data), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Mapp, \"KPwtwb4lt1NZxOwnjhyyIoKb9lQ=\");\n\n_c2 = Mapp;\nexport default Mapp;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapChart\");\n$RefreshReg$(_c2, \"Mapp\");","map":{"version":3,"sources":["C:/Users/admin/Desktop/prov-react/covidp/src/components/map/map.parent.jsx"],"names":["React","useState","memo","ReactTooltip","ZoomableGroup","ComposableMap","Geographies","Geography","geoUrl","max","data","maxi","e","length","TotalConfirmed","formatter","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","MapChart","setTooltipContent","props","scale","geographies","map","geo","value","index","i","Country","properties","NAME","console","log","format","toLocaleString","default","fill","parseInt","outline","hover","pressed","rsmKey","Mapp","content","setContent"],"mappings":"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","sourcesContent":["import React, { useState, memo  }from \"react\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n//import MapChart from \"./map.comp\";\r\nimport './map.comp.style.scss';\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\n  const max=(data)=>{\r\n    let maxi=0;\r\n    for(let e=0; e<data.length;e++){\r\n      if(data[e].TotalConfirmed >maxi ) {\r\n        \r\n        maxi=data[e].TotalConfirmed;}\r\n    }\r\n    return maxi;\r\n  }\r\n\r\n  const formatter = new Intl.NumberFormat('en-US', {\r\n    minimumFractionDigits: 2,      \r\n    maximumFractionDigits: 2,\r\n });\r\n\r\nconst MapChart = ( setTooltipContent ,props ) => {\r\n  var maxi=max(props); \r\n  return (\r\n    \r\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => {\r\n               var value,index ;\r\n               for(let i=0;i<props.length;i++){\r\n                 if(props[i].Country = geo.properties.NAME){\r\n                  value = props[i].TotalConfirmed; index = i;\r\n                  break; }\r\n                 }\r\n              console.log(formatter.format(maxi/props[index].TotalConfirmed))\r\n               return (<Geography\r\n                  key={geo.rsmKey} data-try=\"yoy\"\r\n                  geography={geo}\r\n                  onMouseEnter={() => {\r\n                    const { NAME} = geo.properties;\r\n                    setTooltipContent(`${NAME} — ${value.toLocaleString()}`);\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  style={{\r\n                    default: {\r\n                      fill: `rgba(209 , 7 , 0 , ${parseInt(formatter.format(props[index].TotalConfirmed*10/maxi))} )`,\r\n                      outline: \"none\"\r\n                    },\r\n                    hover: {\r\n                      fill: \"#F53\",\r\n                      outline: \"none\"\r\n                    },\r\n                    pressed: {\r\n                      fill: \"#E42\",\r\n                      outline: \"none\"\r\n                    }\r\n                  }}\r\n                /> )\r\n              })\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    \r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Mapp =(props) => {\r\n    const [content, setContent] = useState(\"\");\r\n    return (\r\n      <div className=\"Map\"> \r\n        {MapChart(setContent , props.data)}\r\n        <ReactTooltip>{content}</ReactTooltip>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\nexport default Mapp;"]},"metadata":{},"sourceType":"module"}