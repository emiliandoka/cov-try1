{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\prov-react\\\\covidp\\\\src\\\\components\\\\map\\\\map.comp.jsx\";\nimport React, { memo } from \"react\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst min = data => {\n  let mini = -1;\n  data.foreach(e => {\n    if (e < mini) mini = e;\n  });\n  return mini;\n};\n\nconst max = data => {\n  let maxi = -1;\n  data.foreach(e => {\n    if (e > maxi) maxi = e;\n  });\n  return maxi;\n};\n\nconst MapChart = ({\n  setTooltipContent\n}, data) => {\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      scale: 200\n    },\n    children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n      children: [\" \", console.log(props.data), /*#__PURE__*/_jsxDEV(Geographies, {\n        geography: geoUrl,\n        children: ({\n          geographies\n        }) => geographies.map(geo => {\n          var country; // , mini=min(props), maxi=max(props);\n          // props.foreach(e=>{ })\n\n          return /*#__PURE__*/_jsxDEV(Geography, {\n            geography: geo,\n            onMouseEnter: () => {\n              const {\n                NAME,\n                POP_EST\n              } = geo.properties;\n              setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\n            },\n            onMouseLeave: () => {\n              setTooltipContent(\"\");\n            },\n            style: {\n              default: {\n                fill: \"#D6D6DA\",\n                outline: \"none\"\n              },\n              hover: {\n                fill: \"#F53\",\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#E42\",\n                outline: \"none\"\n              }\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 24\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 7\n  }, this);\n};\n\n_c = MapChart;\nexport default _c2 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/admin/Desktop/prov-react/covidp/src/components/map/map.comp.jsx"],"names":["React","memo","ZoomableGroup","ComposableMap","Geographies","Geography","geoUrl","rounded","num","Math","round","min","data","mini","foreach","e","max","maxi","MapChart","setTooltipContent","scale","console","log","props","geographies","map","geo","country","NAME","POP_EST","properties","default","fill","outline","hover","pressed","rsmKey"],"mappings":"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","sourcesContent":["import React, { memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst rounded = num => {\r\n  if (num > 1000000000) {\r\n    return Math.round(num / 100000000) / 10 + \"Bn\";\r\n  } else if (num > 1000000) {\r\n    return Math.round(num / 100000) / 10 + \"M\";\r\n  } else {\r\n    return Math.round(num / 100) / 10 + \"K\";\r\n  }\r\n};\r\nconst min=(data)=>{\r\n    let mini=-1\r\n    data.foreach(e=>{\r\n      if(e<mini) mini=e;\r\n    })\r\n    return mini;\r\n}\r\nconst max=(data)=>{\r\n  let maxi=-1\r\n  data.foreach(e=>{\r\n    if(e>maxi) maxi=e;\r\n  })\r\n  return maxi;\r\n}\r\nconst MapChart = ( {setTooltipContent} ,data ) => {\r\n  return (\r\n    \r\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n        <ZoomableGroup> {console.log(props.data)}\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => {\r\n               var country // , mini=min(props), maxi=max(props);\r\n               \r\n              // props.foreach(e=>{ })\r\n               \r\n               return (<Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onMouseEnter={() => {\r\n                    const { NAME, POP_EST } = geo.properties;\r\n                    setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  style={{\r\n                    default: {\r\n                      fill: \"#D6D6DA\",\r\n                      outline: \"none\"\r\n                    },\r\n                    hover: {\r\n                      fill: \"#F53\",\r\n                      outline: \"none\"\r\n                    },\r\n                    pressed: {\r\n                      fill: \"#E42\",\r\n                      outline: \"none\"\r\n                    }\r\n                  }}\r\n                /> )\r\n              })\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    \r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n"]},"metadata":{},"sourceType":"module"}